#!/bin/sh
# ************************************************
# * Corona-Info V2.01                            *
# *                                              *
# * zusammengestellt und angepasst von           *
# * fred_feuerstein (NI-Team)                    *
# *                                              *
# *                                              *
# * Daten kommen von                             *
# * https://corona.lmao.ninja/countries          *
# *                                              *
# * angezeigt werden ausgewählte Länder          *
# * Deutschland, Italien, Spanien, USA,          *
# * Oesterreich, Frankreich, Schweiz, China      *
# * Niederlande, UK, S.Korea, Russia             *
# *                                              *
# * gewünschte Länder können in der Datei        *
# * corona.land im Pluginverzeichnis editiert    *
# * werden. (Länderkennzeich,Anzeigename)        *
# ************************************************


# Bitte Variablen ggfs. anpassen:
#################################################

# Aufrufvariante für Download, "WGET" oder "CURL" bitte auswählen
command="WGET" 

# pluginpath entsprechend setzen, ggfs. von /var/tuxbox/plugins auf /share/tuxbox/neutrino/plugins" ändern
# pluginpath mit $(dirname $0) sollte bei allen passen ;) (thx. DboxOldie)
pluginpath=$(dirname "$0")

# Verzeichnis, in dem die persönliche corona.land Datei liegt
landpath="/var/tuxbox/config"

# Tuxwetter
tux_wetter=$(which tuxwetter)
[ -z $tux_wetter ] && PATH=$PATH:$pluginpath && tux_wetter=`which tuxwetter.so`


# ab hier keine Eintragung mehr nötig
#################################################

title="Corona-Info"
vinfo="V2.01"
icon=$pluginpath"/corona_hint.png"

cleanup() {
	rm -rf /tmp/corona*
	echo "Corona-Info - Temp-Dateien gelöscht"
}

# automatisches cleanup bei Script-Ende
trap cleanup EXIT

echo "--------------------------------------------------"
echo "Corona-Info "$vinfo" startet"
echo "-----------------------------by fred_feuerstein---"

fallurl="https://www.neutrino-images.de/storage/public/corona-info/faelle.png"
toteurl="https://www.neutrino-images.de/storage/public/corona-info/tote.png"
dekarte1url="https://www.neutrino-images.de/storage/public/corona-info/dekarte1.jpg"
dekarte2url="https://www.neutrino-images.de/storage/public/corona-info/dekarte2.jpg"
dekarte3url="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/COVID-19_outbreak_Germany_per_capita_cases_map.svg/800px-COVID-19_outbreak_Germany_per_capita_cases_map.svg.png"

repeat=""
fallstring="PICTURE=fall,|PNG$repeat|$fallurl"
totestring="PICTURE=tote,|PNG$repeat|$toteurl"
dekarte1string="PICTURE=deu,|JPG$repeat|$dekarte1url"
dekarte2string="PICTURE=deu,|JPG$repeat|$dekarte2url"
dekarte3string="PICTURE=deu,|PNG$repeat|$dekarte3url"
gtimeout=10

fallgrafik() {
	tmout=0
  if [ "$tux_wetter" == "" ]; then
      msgbox popup="Tuxwetter nicht installiert - keine Bildanzeige!" icon="$path" title="$titletext1 $vinfo ($command)" timeout=03
      echo "Corona-Info - tuxwetter nicht installiert - keine Bildanzeige"
    else
			$tux_wetter "$fallstring" >/dev/null &
			while pidof `basename $tux_wetter` >/dev/null && [ $tmout -lt $gtimeout ]; do
			    tmout=$(($tmout+1))
			    sleep 1
				done
			pidof `basename $tux_wetter` >/dev/null && killall `basename $tux_wetter`
  fi
}

totegrafik() {
	tmout=0
  if [ "$tux_wetter" == "" ]; then
      msgbox popup="Tuxwetter nicht installiert - keine Bildanzeige!" icon="$path" title="$titletext1 $vinfo ($command)" timeout=03
      echo "Corona-Info - tuxwetter nicht installiert - keine Bildanzeige"
    else
			$tux_wetter "$totestring" >/dev/null &
			while pidof `basename $tux_wetter` >/dev/null && [ $tmout -lt $gtimeout ]; do
			    tmout=$(($tmout+1))
			    sleep 1
				done
			pidof `basename $tux_wetter` >/dev/null && killall `basename $tux_wetter`
  fi
}


dekarte1grafik() {
	tmout=0
  if [ "$tux_wetter" == "" ]; then
      msgbox popup="Tuxwetter nicht installiert - keine Bildanzeige!" icon="$path" title="$titletext1 $vinfo ($command)" timeout=03
      echo "Corona-Info - tuxwetter nicht installiert - keine Bildanzeige"
    else
			$tux_wetter "$dekarte1string" >/dev/null &
			while pidof `basename $tux_wetter` >/dev/null && [ $tmout -lt $gtimeout ]; do
			    tmout=$(($tmout+1))
			    sleep 1
				done
			pidof `basename $tux_wetter` >/dev/null && killall `basename $tux_wetter`
  fi
}


dekarte2grafik() {
	tmout=0
  if [ "$tux_wetter" == "" ]; then
      msgbox popup="Tuxwetter nicht installiert - keine Bildanzeige!" icon="$path" title="$titletext1 $vinfo ($command)" timeout=03
      echo "Corona-Info - tuxwetter nicht installiert - keine Bildanzeige"
    else
			$tux_wetter "$dekarte2string" >/dev/null &
			while pidof `basename $tux_wetter` >/dev/null && [ $tmout -lt $gtimeout ]; do
			    tmout=$(($tmout+1))
			    sleep 1
				done
			pidof `basename $tux_wetter` >/dev/null && killall `basename $tux_wetter`
  fi
}

dekarte3grafik() {
	tmout=0
  if [ "$tux_wetter" == "" ]; then
      msgbox popup="Tuxwetter nicht installiert - keine Bildanzeige!" icon="$path" title="$titletext1 $vinfo ($command)" timeout=03
      echo "Corona-Info - tuxwetter nicht installiert - keine Bildanzeige"
    else
			$tux_wetter "$dekarte3string" >/dev/null &
			while pidof `basename $tux_wetter` >/dev/null && [ $tmout -lt $gtimeout ]; do
			    tmout=$(($tmout+1))
			    sleep 1
				done
			pidof `basename $tux_wetter` >/dev/null && killall `basename $tux_wetter`
  fi
}



cleanup

landfile="$landpath"/corona.land
msgboxfile=/tmp/corona.msgbox
msgboxfile2=/tmp/corona.msgbox2
countriesfile=/tmp/corona.countries
worldfile=/tmp/corona.world
updatefile=/tmp/corona.update

update() {
  echo "Corona-Info - Update-Files Plugin aus Git laden"
	if [ $command = "WGET" ]; then
  	wget -O $pluginpath/corona.so https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.so --no-check-certificate
  	wget -O $pluginpath/corona.cfg https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.cfg --no-check-certificate
  	wget -O $pluginpath/corona_hint.png https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona_hint.png --no-check-certificate
	else
		curl -k -o $pluginpath/corona.so https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.so
		curl -k -o $pluginpath/corona.cfg https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.cfg
		curl -k -o $pluginpath/corona_hint.png https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona_hint.png
	fi 
}

updateland() {
  echo "Corona-Info - Update-File corona.land aus Git laden"
	if [ $command = "WGET" ]; then
  	wget -O $landpath/corona.land https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.land --no-check-certificate
	else
		curl -k -o $landpath/corona.land https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.land
	fi 
}

updateseiteerstellen() {

  echo "Corona-Info - Update-Check-Version im Git"
	if [ $command = "WGET" ]; then
		wget -O $updatefile https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.so
	else
		curl -k -o $updatefile https://raw.githubusercontent.com/neutrino-images/ni-neutrino-plugins/master/scripts-sh/plugins/corona-info/corona.so
	fi 

	updatevertemp=$(cat $updatefile | grep "vinfo=")
	updatever=$(echo "$updatevertemp" | cut -d '"' -f2 )

  echo "Corona-Info - Update Seite erstellen"

	echo " " >> $msgboxfile2
	echo "~BPlugin-Update-Funktion"  >> $msgboxfile2
	echo "~s" >> $msgboxfile2
	echo " " >> $msgboxfile2
	echo "Versionsstand lokal:  ~T0450~Y"$vinfo >> $msgboxfile2
	echo "Versionsstand im GIT: ~T0450~Y"$updatever >> $msgboxfile2
	echo " " >> $msgboxfile2
	echo " " >> $msgboxfile2
	echo "Bitte Hinweise zu neuen Versionen im NI-Forum beachten!"  >> $msgboxfile2
	echo "Es können ggfs. manuelle ~Anderungen an der corona.land n~otig sein."  >> $msgboxfile2
	echo "~s" >> $msgboxfile2
	echo "Alternativ kann auch die corona.land vom Server geholt werden."  >> $msgboxfile2
	echo "Achtung: dabei wird die vorhandene Datei ~uberschrieben."  >> $msgboxfile2

}

updateseite() {

echo "Corona-Info - Update-Seite wird angezeigt am TV"

while :; do
	auswahl=3
	msgbox msg="$msgboxfile2" size="22" icon="$icon" title="$title $vinfo" select="Update Plugin,Update corona.land,ZUR~UCK" order=3 default=$auswahl >/dev/null
	auswahl=$?
	case $auswahl in
	  1)
      echo "Corona-Info - Update Plugin "$vinfo" auf "$updatever" "
      update
      msgbox popup="Plugin aktualisiert von $vinfo auf $updatever" icon="$icon" title="$title $vinfo" timeout=03
  		;;		
	  2)
      echo "Corona-Info - Update corona.land"
      updateland
      msgbox popup="corona.land aktualisiert ..." icon="$icon" title="$title $vinfo" timeout=03
  		;;		
	  3)
		  #Abbruch
      echo "Corona-Info - Zurück (OK-Taste)"
      rm -rf /tmp/corona.msgbox2
			break
   		;;
		*)
			echo "Corona-Info - Zurück (Exit-Taste/Timeout)"
			rm -rf /tmp/corona.msgbox2
			break
		  ;;
	esac
done

}

if [ -e "$landfile" ]; then
	echo "Corona-Info - corona.land ("$landpath") Datei wird genutzt"
else 
	landfile=/tmp/corona.land
	echo '"DEU",Deutschland' >> $landfile
	echo '"ITA",Italien' >> $landfile
	echo '"ESP",Spanien' >> $landfile
	echo '"PRT",Portugal' >> $landfile
	echo '"USA",USA' >> $landfile
	echo '"AUT",~Osterreich' >> $landfile
	echo '"CHE",Schweiz' >> $landfile
	echo '"FRA",Frankreich' >> $landfile
	echo '"NLD",Niederlande' >> $landfile
	echo '"CHN",China' >> $landfile
	echo '"KOR",S~udkorea' >> $landfile
	echo '"RUS",Russland' >> $landfile
	echo '"GBR",Gro~zbritannien' >> $landfile
	echo "Corona-Info - corona.land nicht vorhanden - Default-Laender werden genutzt"
fi

lines=$(sed $= -n $landfile)

echo "Corona-Info - Länderanzahl = "$lines". "

msgbox popup="Daten werden geholt... (ca. 6 Sekunden)" icon="$icon" title="$title $vinfo ($command)" timeout=02

echo "Corona-Info - Länderdaten-Download"

if [ $command = "WGET" ]; then
	wget -O $countriesfile https://corona.lmao.ninja/countries --no-check-certificate
	wget -O $worldfile https://corona.lmao.ninja/all --no-check-certificate
else
	curl -k -o $countriesfile https://corona.lmao.ninja/countries
	curl -k -o $worldfile https://corona.lmao.ninja/all
fi 

if [ -e $countriesfile ]; then
	sed -i -e 's|,"country|\n{"country|g' $countriesfile
	echo "Corona-Info - Länderdaten erfolgreich geladen"
else
	echo "Corona-Info - Länderdaten in $countriesfile nicht gefunden"
fi

if [ -e $worldfile ]; then
	echo "Corona-Info - Länderdaten-Summe erfolgreich geladen"
else
	echo "Corona-Info - Länderdaten-Summe in $worldfile nicht gefunden"
fi


# Übersicht erstellen

echo "Corona-Info - Daten werden aufbereitet zur Anzeige"

echo "~s" > $msgboxfile
echo "Land    ~T0215~YGesamt  ~T0310      ~T0380~RGesamt ~T0460 ~T0525 ~T0585~YErkrankt ~T0670~B ~T0745~GGeheilt ~T0820~GTests ~T0925~GTests ~T0990~YFälle  ~T1055~RTote" >> $msgboxfile
echo " ~T0215~YInfizierte  ~T0310heute      ~T0380~RTote ~T0460Quote ~T0525heute ~T0585~Ymild ~T0670~Bkritisch ~T0745~Ggemeld. ~T0820~GAnzahl ~T0925~GpMio. ~T0990~YpMio.  ~T1055~RpMio." >> $msgboxfile
echo "~s" >> $msgboxfile


# Werte aller Länder ermitteln und in Datei speichern

i=0
for i in $(seq 1 "$lines"); do
	landtemp=0
	LAND=0
	GESAMT=0
	NEU_HEUTE=0
	TOTE=0
	TOTE_HEUTE=0
	GEHEILT=0
	ERKRANKT=0
	KRITISCH=0
	FALLPROMILLION=0
	TOTEPROMILLION=0

	landtemp=$(head -n"$i" $landfile | tail -n1 | cut -d "," -f1)
	landanzeige=$(head -n"$i" $landfile | tail -n1 | cut -d "," -f2)

	LAND=$(cat $countriesfile | grep "$landtemp")
	GESAMT=$(echo "$LAND" | sed 's/.*cases":\(.*\)$/\1/' | cut -d "," -f1)
	NEU_HEUTE=$(echo "$LAND" | sed 's/.*todayCases":\(.*\)$/\1/' | cut -d "," -f1)
	TOTE=$(echo "$LAND" | sed 's/.*deaths":\(.*\)$/\1/' | cut -d "," -f1)
	TOTE_HEUTE=$(echo "$LAND" | sed 's/.*todayDeaths":\(.*\)$/\1/' | cut -d "," -f1)
	QUOTETEMP=$(echo | awk '{print '$TOTE'*100/'$GESAMT'}')
	QUOTE=$(printf "%.1f\n" $QUOTETEMP)
	GEHEILT=$(echo "$LAND" | sed 's/.*recovered":\(.*\)$/\1/' | cut -d "," -f1)
	ERKRANKT=$(echo "$LAND" | sed 's/.*active":\(.*\)$/\1/' | cut -d "," -f1)
	KRITISCH=$(echo "$LAND" | sed 's/.*critical":\(.*\)$/\1/' | cut -d "," -f1)
	FALLPROMILLION=$(echo "$LAND" | sed 's/.*casesPerOneMillion":\(.*\)$/\1/' | cut -d "," -f1)
	TOTEPROMILLION=$(echo "$LAND" | sed 's/.*deathsPerOneMillion":\(.*\)$/\1/' | cut -d "," -f1)
	TESTS=$(echo "$LAND" | sed 's/.*tests":\(.*\)$/\1/' | cut -d "," -f1)
	TESTSPROMILLION=$(echo "$LAND" | sed 's/.*testsPerOneMillion":\(.*\)$/\1/' | cut -d "}" -f1)

	echo $landanzeige" ~T0215~Y"$GESAMT" ~T0310"$NEU_HEUTE"  ~T0380~R"$TOTE"  ~T0460"$QUOTE"% ~T0525"$TOTE_HEUTE" ~T0585~Y"$ERKRANKT" ~T0670~B"$KRITISCH" ~T0745~G"$GEHEILT" ~T0820~G"$TESTS" ~T0925~G"$TESTSPROMILLION" ~T0990~Y"$FALLPROMILLION" ~T1055~R"$TOTEPROMILLION"" >> $msgboxfile
done

# Gesamtwerte ermitteln und in Datei speichern

ALL=$(cat $worldfile)
ALL_GESAMT=$(echo "$ALL" | sed 's/.*cases":\(.*\)$/\1/' | cut -d "," -f1)
ALL_TOTE=$(echo "$ALL" | sed 's/.*deaths":\(.*\)$/\1/' | cut -d "," -f1)
ALL_NEU_HEUTE=$(echo "$ALL" | sed 's/.*todayCases":\(.*\)$/\1/' | cut -d "," -f1)
ALL_TOTE_HEUTE=$(echo "$ALL" | sed 's/.*todayDeaths":\(.*\)$/\1/' | cut -d "," -f1)
ALL_GEHEILT=$(echo "$ALL" | sed 's/.*recovered":\(.*\)$/\1/' | cut -d "," -f1)
ALL_ERKRANKT=$(echo "$ALL" | sed 's/.*active":\(.*\)$/\1/' | cut -d "," -f1)
ALL_QUOTETEMP=$(echo | awk '{print '$ALL_TOTE'*100/'$ALL_GESAMT'}')
ALL_QUOTE=$(printf "%.1f\n" $ALL_QUOTETEMP)
ALL_ANZAHL=$(echo "$ALL" | sed 's/.*affectedCountries":\(.*\)$/\1/' | cut -d "}" -f1)
ALL_UPDATETEMP=$(echo "$ALL" | sed 's/.*updated":\(.*\)$/\1/' | cut -d "," -f1)
ALL_TESTS=$(echo "$ALL" | sed 's/.*tests":\(.*\)$/\1/' | cut -d "," -f1)
ALL_TESTSPROMILLION=$(echo "$ALL" | sed 's/.*testsPerOneMillion":\(.*\)$/\1/' | cut -d "," -f1)
ALL_FALLPROMILLION=$(echo "$ALL" | sed 's/.*casesPerOneMillion":\(.*\)$/\1/' | cut -d "," -f1)
ALL_TOTEPROMILLION=$(echo "$ALL" | sed 's/.*deathsPerOneMillion":\(.*\)$/\1/' | cut -d "," -f1)
ALL_KRITISCH=$(echo "$ALL" | sed 's/.*critical":\(.*\)$/\1/' | cut -d "," -f1)
ALL_UPDATE=$(date -d @${ALL_UPDATETEMP:0:10} '+%d.%m.%Y - %H:%M')

echo "~s" >> $msgboxfile
echo "Weltweit ~T0215~Y"$ALL_GESAMT" ~T0310"$ALL_NEU_HEUTE"  ~T0380~R"$ALL_TOTE"  ~T0460"$ALL_QUOTE"% ~T0525"$ALL_TOTE_HEUTE" ~T0585~Y"$ALL_ERKRANKT" ~T0670~B"$ALL_KRITISCH" ~T0745~G"$ALL_GEHEILT" ~T0820~G"$ALL_TESTS" ~T0925~G"$ALL_TESTSPROMILLION" ~T0990~Y"$ALL_FALLPROMILLION" ~T1055~R"$ALL_TOTEPROMILLION" " >> $msgboxfile
echo "Anzahl Länder ~T0215"$ALL_ANZAHL" " >> $msgboxfile
echo "~s" >> $msgboxfile
echo "~cQuelle: https://corona.lmao.ninja/countries - Datenstand: "$ALL_UPDATE" Uhr" >> $msgboxfile 
#echo "~cDie Liste der L~ander kann in der Datei corona.land editiert/sortiert werden. fred_feuerstein (NI-Team)" >> $msgboxfile 

echo "Corona-Info - Übersicht wurde erstellt"

# Schriftgröße ermitteln

if [ "$lines" -ge "24" ]; then
	rowsize="14"
elif [ "$lines" -ge "19" ]; then
	rowsize="16"
elif [ "$lines" -ge "17" ]; then
	rowsize="18" 
elif [ "$lines" -le "16" ]; then
	rowsize="20"
fi

echo "Corona-Info - Schriftgröße "$rowsize" eingestellt!"

# Übersicht anzeigen

echo "Corona-Info - Bitte warten, Anzeige am TV wird vorbereitet  und angezeigt"

while :; do
	auswahl=3
	msgbox msg="$msgboxfile" size="$rowsize" icon="$icon" title="$title $vinfo" select="F~alle (WHO),Tote (WHO),EXIT,Update-Plugin,DE-Karte (BMP),DE-Karte (n-tv),DE-Karte (WHO)" order=4 default=$auswahl >/dev/null
	auswahl=$?
	case $auswahl in
	  1)
      echo "Corona-Info - Grafik-Fälle-Weltweit-WHO"
      fallgrafik
  		;;		
	  2)
      echo "Corona-Info - Grafik-Tote-Weltweit-WHO"
      totegrafik
  		;;		
	  3)
		  #Abbruch
      echo "Corona-Info - Exit (OK-Taste)"
			break
   		;;
	  4)
	    echo "Corona-Info - Updateseite geöffnet"
	    updateseiteerstellen
	    updateseite
	    ;;
	  5)
	    echo "Corona-Info - Deutschland-Karte BerlinderMorgenpost"
	    dekarte1grafik
	    ;;
	  6)
	    echo "Corona-Info - Deutschland-Karte n-tv"
	    dekarte2grafik
	    ;;
	  7)
	    echo "Corona-Info - Deutschland-Karte wiki/WHO"
	    dekarte3grafik
	    ;;
		*)
			echo "Corona-Info - Exit (Exit-Taste/Timeout)"
			break
		  ;;
	esac
done

exit 0
